//R25: <Return> → return <Return’> ;
void Return() {
	if (token.value == "return") {
		ReturnP();
		if (lexer(s).value == ";") {
			PrintRule(25);
		}
		else Error;		
	}
	else Error();
}

//R26: <Return’> → <Expression> | 𝜀
void ReturnP() {
	if (token.type == "Not Token" || token.type == "COMMENT") {
		Empty();
	}
	else {
		Expression();
	}
	PrintRule(26);
}

//R27: <Print> → put (<Expression>);
void Print() {
	if (token.value == "put") {
		if (lexer(s).value == "(") {
			Expression();
			if (lexer(s).value == ")") {
				if (lexer(s).value == ";") {
					PrintRule(27);
				}
				else Error;
			}
			else Error;
		}
		else Error;
	}
	else Error;
}

//R28: <Scan> → get(<IDs>);
void Scan() {
	if (token.value == "get") {
		if (lexer(s).value == "(") {
			IDs();
			if (lexer(s).value == ")") {
				if (lexer(s).value == ";") {
					PrintRule(28);
				}
				else Error;
			}
			else Error;
		}
		else Error;
	}
	else Error;
}

//R29: <While> → while (<Condition>) <Statement>
void While() {
	if (token.value == "while") {
		if (lexer(s).value == "(") {
			Condition();
			if (lexer(s).value == ")") {
				Statement();
				PrintRule(29);
			}
			else Error;
		}
		else Error;
	}
	else Error;
}

//R30: <Condition> → <Expression> <Relop> <Expression>
void Condition() {
	Expression();
	Relop();
	Expression();

	PrintRule(30);
}

//R31: <Relop> → == | ^= | > | < | => | =<
void Relop() {
	if (token.value == "==" || token.value == "^=" || token.value == ">" || token.value == "<" || token.value == "=>" || token.value == "=<") {
		PrintRule(31);
	}
	else Error();
}

//R32: <Expression> → <Term> <Expression’>
void Expression() {
	Term();
	ExpressionP();
	PrintRule(32);
}

//R33: <Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | 𝜀
void ExpressionP() {
	if (token.type == "Not Token" || token.type == "COMMENT") {
		Empty();
		PrintRule(33);
	}
	else if (token.value == "+" || token.value == "-") {
		Term();
		ExpressionP();
		PrintRule(33);
	}
	else Error;
}

//R34: <Term> → <Factor> <Term’>
void Term() {
	Factor();
	TermP();
	PrintRule(34);
}

//R35: <Term’> → * <Factor> <Term’> | / <Factor> <Term’> | 𝜀
void TermP() {
	if (token.type == "Not Token" || token.type == "COMMENT") {
		Empty();
		PrintRule(35);
	}
	else if (token.value == "*" || token.value == "/") {
		Factor();
		TermP();
		PrintRule(35);
	}
	else Error;
}

//R36: <Factor> → - <Primary> | <Primary>
void Factor() {
	if (token.value == "-") {
		Primary();
		PrintRule(36);
	}
	else {
		Primary();
		PrintRule(36);
	}
}

//R37: <Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false
void Primary() {
	if (token.type == "identifier") {
		Identifier();
		if (token.value == "(") {
			IDs();
		}
		PrintRule(37);
	}
	else if (token.value == "integer") {
		Integer();
		PrintRule(37);
	}
	else if (token.value == "(") {
		Expression();
		PrintRule(37);
	}
	else if (token.type == "real") {
		Real();
		PrintRule(37);
	}
	else if (token.value == "true" || token.value == "false")
		PrintRule(37);
	else Error;
}

//R38: <Empty> → 𝜀
void Empty() {}

void PrintRule(int ruleNum) {
	switch (ruleNum) {
		case 1: 
			coutfile << "<Rat18S> → <Opt Function Definitions> %% <Opt Declaration List> <Statement List>" << endl;
			break;
		case 2:
			coutfile << "<Opt Function Definitions> → <Function Definitions> | <Empty>" << endl;
			break;
		case 3:
			coutfile << "<Function Definitions> → <Function> <Function Definitions’>" << endl;
			break;
		case 4:
			coutfile << "<Function Definitions’> → <Function Definitions> |  𝜀" << endl;
			break;
		case 5: 
			coutfile << "<Function> → function <Identifier> [<Opt Parameter List>] <Opt Declaration List> <Body>" << endl;
			break;
		case 6:
			coutfile << "<Opt Parameter List> → <Parameter List> | <Empty>" << endl;
			break;
		case 7:
			coutfile << "<Parameter List> → <Parameter> <Parameter List’>" << endl;
			break;
		case 8:
			coutfile << "<Parameter List’> → , <Parameter List> |  𝜀" << endl;
			break;
		case 9:
			coutfile << "<Parameter> → <IDs> : <Qualifier>" << endl;
			break;
		case 10:
			coutfile << "<Qualifier> → int | boolean | real" << endl;
			break;
		case 11:
			coutfile << "<Body> → { <Statement List> }" << endl;
			break;
		case 12:
			coutfile << "<Opt Declaration List> → <Declaration List> | <Empty>" << endl;
			break;
		case 13:
			coutfile << "<Declaration List> → <Declaration> ; <Declaration List’>" << endl;
			break;
		case 14:
			coutfile << "<Declaration List’> → <Declaration List> | 𝜀" << endl;
			break;
		case 15:
			coutfile << "<Declaration> → <Qualifier> <IDs>" << endl;
			break;
		case 16:
			coutfile << "<IDs> → <Identifier> <IDs’>" << endl;
			break;
		case 17:
			coutfile << "<IDs’> → , <IDs> | 𝜀" << endl;
			break;
		case 18:
			coutfile << "<Statement List> → <Statement> <Statement List’>" << endl;
			break;
		case 19:
			coutfile << "<Statement List’> → <Statement List> | 𝜀" << endl;
			break;
		case 20:
			coutfile << "<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>" << endl;
			break;
		case 21:
			coutfile << "<Compound> → { <Statement List> }" << endl;
			break;
		case 22:
			coutfile << "<Assign> → <Identifier> = <Expressions> ;" << endl;
			break;
		case 23:
			coutfile << "<If> →  if ( <Condition> ) <Statement> <If’> endif" << endl;
			break;
		case 24:
			coutfile << "<If’> → else <Statement> | 𝜀" << endl;
			break;
		case 25:
			coutfile << "<Return> → return <Return’> ;" << endl;
			break;
		case 26:
			coutfile << "<Return’> → <Expression> | 𝜀" << endl;
			break;
		case 27:
			coutfile << "<Print> → put (<Expression>);" << endl;
			break;
		case 28:
			coutfile << "<Scan> → get(<IDs>);" << endl;
			break;
		case 29:
			coutfile << "<While> → while (<Condition>) <Statement>" << endl;
			break;
		case 30:
			coutfile << "<Condition> → <Expression> <Relop> <Expression>" << endl;
			break;
		case 31:
			coutfile << "<Relop> → == | ^= | > | < | => | =<" << endl;
			break;
		case 32:
			coutfile << "<Expression> → <Term> <Expression’>" << endl;
			break;
		case 33:
			coutfile << "<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | 𝜀" << endl;
			break;
		case 34:
			coutfile << "<Term> → <Factor> <Term’>" << endl;
			break;
		case 35:
			coutfile << "<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | 𝜀" << endl;
			break;
		case 36:
			coutfile << "<Factor> → - <Primary> | <Primary>" << endl;
			break;
		case 37:
			coutfile << "<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false" << endl;
			break;
		default:
			coutfile << "Syntax Error" << endl;
			break;
	}
}
